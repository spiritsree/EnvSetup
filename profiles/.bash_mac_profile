# shellcheck shell=bash
#####################################################################################################
#                            BASH Configuration 'N' Aliases For Mac OS                              #
#####################################################################################################

#####################################################################################################
#                                      Configurations                                               #
#####################################################################################################

# Bash Auto Completion
# shellcheck disable=SC1091
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

# Export sbin path
export PATH="/usr/local/sbin:$PATH"

# To disable zsh warning as per https://support.apple.com/en-au/HT208050
export BASH_SILENCE_DEPRECATION_WARNING=1

# Python env
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

#####################################################################################################
#                                      Aliases                                                      #
#####################################################################################################

# Sleep mac immediatly
alias lock="pmset sleepnow"

# Flush DNS
alias flushdns="dscacheutil -flushcache"

# ls aliases
alias ls="ls -G"
alias ll="ls -lhGF"
alias la="ls -AG"
alias lla="ls -lhAG"
alias l="ls -CFG"
alias l.="ls -dG .*"
alias lsd="ll | grep '^d'"

#ipinfo
alias ipinfo="echo -ne \ - Public facing IP Address:\ ; curl ipecho.net/plain ; echo ; echo -ne \ - Internal IP Address:\ ;  ipconfig getifaddr en0"

# finder
alias fopen="open -a Finder ./"

# Memory related
alias memHogsTop="top -l 1 -o rsize | head -20"
alias memHogsPs="ps wwaxm -o pid,stat,vsize,rss,time,command | head -10"

# CPU related
alias cpu_hogs="ps wwaxr -o pid,stat,%cpu,time,command | head -10"

# top every 10 secs
alias topForever="top -l 9999999 -s 10 -o cpu"
alias ttop="top -R -F -s 10 -o rsize"

# Sockets
alias socks="lsof -i"                                    # all tcp/ip sockets
alias lsocks="sudo lsof -i -P"                           # all open sockets
alias usocks="sudo lsof -nP | grep UDP"                  # open UDP sockets
alias tsocks="sudo lsof -nP | grep TCP"                  # open TCP sockets

# Network related
alias ifinfo='ipconfig getpacket en0'                    # info on connections for en0
alias ifinfo1='ipconfig getpacket en1'                   # info on connections for en1
alias listen=' sudo lsof -iTCP -sTCP:LISTEN -P -n'       # listening connections

# Finder Hidden files
alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'

#####################################################################################################
#                                      Functions                                                    #
#####################################################################################################

cd() { builtin cd "$@" || return; ls -lhG; }

brew-cleanup() {
    brew update
    brew upgrade
    brew cleanup -s
}

# trash:     move file to trash
trash() { command mv "$@" ~/.Trash ; }

# ql:     Opens any file in MacOS Quicklook Preview
ql() {
    if [[ -z "$*" ]]; then
        echo 'Usage: ql <files>'
    else
        qlmanage -p "$*" >& /dev/null;
    fi
}

# pbcurl: curl url from clipboard
pbcurl() {
    if [[ "$*" =~ "--help" ]] || [[ "$*" =~ "-h" ]]; then
        echo 'Usage: pbcurl [-h|--help] [curl_options]'
    else
        curl -L "$@" "$(pbpaste)"
    fi
}

# pbindent: indent 4 spaces in clipboard text.
pbindent() {
    writer='pbcopy'
    pbpaste | sed 's/^/    /' | $writer
}

# pbsed: to sed replace patterns from clipboard text.
pbsed() {
    if [[ -z "$*" ]]; then
        echo 'Usage: pbsed [<sed_options>] <sed_pattern>'
    else
        pbpaste | sed "$@" | pbcopy
    fi
}

pbclear() {
	pbcopy < /dev/null
}


# cdf: cd to frontmost dir
cdf () {
    currFolderPath=$( /usr/bin/osascript <<EOT
        tell application "Finder"
            try
                set currFolder to (folder of the front window as alias)
            on error
                set currFolder to (path to desktop folder as alias)
            end try
            POSIX path of currFolder
        end tell
EOT
    )
    echo "cd to \"$currFolderPath\""
    cd "$currFolderPath" || return
}

ssh-env() {
    if [[ -z "$*" ]]; then
        echo
        echo "Setup environment for MacOS's built-in ssh-agent and execute command."
        echo "Useful when crontab commands require ssh-agent access for authentication."
        echo
        echo 'Usage: ssh-env <command>'
        echo
    else
        SSH_AUTH_SOCK=$(
            $(command -v lsof) -U |
            grep Listeners    |
            grep ssh-agent    |
            awk '{print $8}'
        )
        export SSH_AUTH_SOCK
        exec "$@"
    fi
}

pyspark-install() {
    # Tested on Apache Spark 2.4.4, Python 3.7.5 and Java 1.8.0_112

    brew update > /dev/null 2>&1

    # For Apache Spark
    if command -v java > /dev/null; then
        # Other versions will give the following error
        # Unsupported class file major version 55
        JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
        export JAVA_HOME
    fi

    echo "Installing scala..."
    brew install scala > /dev/null 2>&1
    echo "Installing java8..."
    brew cask install homebrew/cask-versions/java8 > /dev/null 2>&1
    echo "Installing Apache Spark..."
    brew install apache-spark > /dev/null 2>&1

    spark_version=$(brew info apache-spark | sed 's|.*stable \([0-9\.]*\).*|\1|' | head -1)
    # For a ipython notebook and pyspark integration
    if command -v pyspark > /dev/null; then
        export SPARK_HOME="/usr/local/Cellar/apache-spark/${spark_version}/libexec"
        export PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/build:$PYTHONPATH
        export PYTHONPATH=$SPARK_HOME/python/lib/pyspark.zip:$SPARK_HOME/python/lib/py4j-0.10.7-src.zip:$PYTHONPATH
    fi
}

pyspark-cleanup() {
    echo "Removing scala..."
    brew uninstall scala > /dev/null 2>&1
    echo "Removing Apache Spark.."
    brew uninstall apache-spark > /dev/null 2>&1
    echo "Removing Java8..."
    brew cask uninstall homebrew/cask-versions/java8 > /dev/null 2>&1
}

kubeval-install() {
    brew tap garethr/kubeval > /dev/null 2>&1
    brew install kubeval > /dev/null 2>&1
}

# Skaffold Run
# https://skaffold.dev/docs/install/
skaffold-run() {
    if $(command -v skaffold > /dev/null 2>&1); then
        skaffold run
    else
        curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-darwin-amd64 2> /dev/null
        chmod +x skaffold
        sudo mv skaffold /usr/local/bin
        skaffold run
    fi
}

# Stubby
stubby-dns() {
    # Use stubby DNS
    if [[ $(ps aux | grep [s]tubby | wc -l) -eq 0 ]]; then
        echo 'Stubby service not running...''
        echo 'Please start stubby and try again...'
    elif $(dig +short +time=5 @127.0.0.1 www.example.com > /dev/null 2>&1); then
        sudo /usr/local/opt/stubby/sbin/stubby-setdns-macos.sh -r > /dev/null 2>&1
        echo 'Switched to stubby DNS...'
    else
        echo 'Stubby resoultion not working...'
        echo 'Please fix it and try again...'
    fi
}

stubby-dns-revert() {
    # Revert to normal ISP DNS
    sudo /usr/local/opt/stubby/sbin/stubby-setdns-macos.sh -r > /dev/null 2>&1
    if $(dig +short +time=5 www.example.com > /dev/null 2>&1); then
        echo 'Successfully reverted normal DNS...'
    fi
}
