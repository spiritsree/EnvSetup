# ~/.tmux.conf

############### Basic ##############

# Set the base-index to 1 rather than 0
set-option -g base-index 1
set-window-option -g pane-base-index 1

############### Global #############

set-option -g default-terminal "screen-256color"
set-option -g assume-paste-time 1
set-option -g bell-action any
set-option -g default-command ""
set-option -g default-shell "/bin/bash"
set-option -g destroy-unattached off
set-option -g detach-on-destroy on
set-option -g display-panes-active-colour red
set-option -g display-panes-colour blue
set-option -g display-panes-time 1000
set-option -g display-time 3000
set-option -g history-limit 5000
set-option -g lock-after-time 0
set-option -g lock-command "lock -np"
set-option -g message-command-style fg=yellow,bg=black
set-option -g message-style fg=black,bg=yellow
set-option -g renumber-windows off
set-option -g repeat-time 500
set-option -g set-titles on
set-option -g set-titles-string "#S:#I:#W - \"#T\" #{session_alerts}"
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-option -g word-separators " -_@"
set-option -g xterm-keys on

############### Binding ############

# Prefix
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix

# Easy clear history
bind-key C clear-history

# Easy config reload
bind-key r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# Double press <prefix> to move to last window
bind-key l last-window

# toogle pane full screen
bind-key z resize-pane -Z

bind-key '~' show-messages
bind-key "'" command-prompt -p index "select-window -t ':%%'"
bind-key R refresh-client
bind-key C-o rotate-window
bind-key C-z suspend-client
bind-key Space next-layout
bind-key ! break-pane
bind-key '#' list-buffers
bind-key & confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key ( switch-client -p
bind-key ) switch-client -n
bind-key , command-prompt -I "#W" "rename-window '%%'"
bind-key '$' command-prompt -I "#S" "rename-session '%%'"
bind-key - delete-buffer
bind-key . command-prompt "move-window -t '%%'"
bind-key 0 select-window -t :10
bind-key 1 select-window -t :1
bind-key 2 select-window -t :2
bind-key 3 select-window -t :3
bind-key 4 select-window -t :4
bind-key 5 select-window -t :5
bind-key 6 select-window -t :6
bind-key 7 select-window -t :7
bind-key 8 select-window -t :8
bind-key 9 select-window -t :9
bind-key : command-prompt
bind-key = choose-buffer
bind-key ? list-keys
bind-key D choose-client
bind-key L switch-client -l
bind-key [ copy-mode
bind-key ] paste-buffer
bind-key c new-window
bind-key d detach-client
bind-key f command-prompt "find-window '%%'"
bind-key M display-message
bind-key n next-window
bind-key o select-pane -t :.+
bind-key p previous-window
bind-key q display-panes
bind-key s choose-tree
bind-key t clock-mode
bind-key w choose-window
bind-key x confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind-key { swap-pane -U
bind-key } swap-pane -D
bind-key -r Up select-pane -U
bind-key -r Down select-pane -D
bind-key -r Left select-pane -L
bind-key -r Right select-pane -R
bind-key M-1 select-layout even-horizontal
bind-key M-2 select-layout even-vertical
bind-key M-3 select-layout main-horizontal
bind-key M-4 select-layout main-vertical
bind-key M-5 select-layout tiled
bind-key M-n next-window -a
bind-key M-o rotate-window -D
bind-key M-p previous-window -a
bind-key Z resize-pane -U 10
bind-key X resize-pane -D 10
bind-key W resize-pane -R 10
bind-key Y resize-pane -L 10
bind-key C-i resize-pane -U
bind-key C-d resize-pane -D
bind-key C-x resize-pane -R 10
bind-key C-y resize-pane -L 10

# split panes using | and -
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %
# Set easier window split keys
bind-key v split-window -h
bind-key h split-window -v

############ Mouse Operation #################

# Enable mouse support
set-option -g mouse on

bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M

bind -T copy-mode-vi C-WheelUpPane send-keys -X halfpage-up
bind -T copy-mode-vi C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down

# To copy, left click and drag to highlight text, once you release left click highlighting will disappear
# and will automatically be available in clibboard
# Use vim keybindings in copy mode
set-option -g mode-keys vi

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard" \; display-message "highlighted selection copied to clipboard"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
# bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "$yank"
# bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection

bind m run "\
    tmux show-options -g | grep -q "mouse\\s*on"; \
    if [ \$? = 0 ]; \
    then  \
        toggle=off;  \
    else  \
        toggle=on;  \
    fi;  \
    tmux display-message \"mouse is now: \$toggle\";  \
    tmux set-option -w mouse \$toggle; \
    tmux set-option -g mouse \$toggle; \
    "
bind -T root MouseDown2Pane run -b "xclip -o | tmux load-buffer - && tmux paste-buffer -s ' '"

############ Status Bar #################

set-option -g status on
set-option -g status-interval 15
set-option -g status-keys emacs
set-option -g status-style fg=black,bg=green
set-option -g status-position bottom
set-option -g status-justify "left"  						# left align the window list
set-option -g status-left-style default
set-option -g status-left "#{prefix_highlight}#[fg=colour22,bg=colour148,bold] #S #[fg=colour148,bg=colour236,nobold,nounderscore,noitalics] "
set-option -g status-left-length 60        					# max length of status-left
set-option -g status-right "#[fg=colour255]| #[fg=colour189]#(bash ~/.bin/disk.sh) #[fg=colour255]| #[fg=colour97]#(bash ~/.bin/pub_ip.sh)#[fg=colour255] | #[fg=colour45]#(bash ~/.bin/ip.sh) #[fg=colour255]| #[fg=colour136]%d-%b-%Y %H:%M "
set-option -g status-right-style default
set-option -g status-right-length 100       				# max length of status-right

############ Color #################

# default statusbar colors
set-option -g status-bg colour235 							# base02
set-option -g status-fg colour136 							# yellow
set-option -g status-attr default

# default window title colors
set-window-option -g window-status-fg colour244 			# base0
set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg colour166 	# orange
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright
set-window-option -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour166]#F '
set-window-option -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

# pane border
set-option -g pane-border-fg colour235 						# base02
set-option -g pane-active-border-fg colour166 				# orange

# message text
set-option -g message-fg colour9 							# red
set-option -g message-bg colour255 							# white

# pane number display
set-option -g display-panes-active-colour colour33			# blue
set-option -g display-panes-colour colour166 				# orange

# clock
set-window-option -g clock-mode-colour colour64  			# green
set-window-option -g clock-mode-style 24        			# 24 hour clock

############### Local ##############

# source osx specific tmux config
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'


